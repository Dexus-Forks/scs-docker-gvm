name: Docker Build

on:
  push:
    branches: [master]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  pull_request:
    branches: [master, dev]

concurrency: ci-${{ github.ref }}

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME_GHCR: ghcr.io/${{ github.repository }}
  IMAGE_NAME_DOCKER: daug/test-github-action

permissions:
  contents: read
  packages: write

jobs:
  build_apks:
    name: Build APKs
    runs-on: ubuntu-latest

    outputs:
      labels: ${{ steps.meta.outputs.labels }}
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      # So now you can use Actions' own caching!
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # So now you can use Actions' own caching!
      - name: Cache APK Output
        id: restore-cache-apk
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/apk-build/target
            ${{ github.workspace }}/apk-build/user.abuild/
          key: ${{ runner.os }}-apks-${{ hashFiles('./apk-build/aports2/**/APKBUILD') }}
          restore-keys: |
            ${{ runner.os }}-apks-${{ hashFiles('./apk-build/aports2/**/APKBUILD') }}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login to GitHub Container Registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: steps.restore-cache-apk.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./apk-build/builder/
          tags: apk-builder:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          push: false
          load: true

      - name: Prepare Folders and Secrets for Build
        if: steps.restore-cache-apk.outputs.cache-hit != 'true'
        id: userid
        shell: bash
        run: echo "::set-output name=author::$(id -u ${USER}):$(id -g ${USER})"

      - name: Prepare Folders and Secrets for Build
        if: steps.restore-cache-apk.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/apk-build/user.abuild
          mkdir -p ${GITHUB_WORKSPACE}/apk-build/aports2
          mkdir -p ${GITHUB_WORKSPACE}/apk-build/target/community/x86_64
          mkdir -p ${GITHUB_WORKSPACE}/apk-build/target/community/noarch
          chmod -R 777 ${GITHUB_WORKSPACE}/apk-build/aports2
          chmod -R 777 ${GITHUB_WORKSPACE}/apk-build/target
          echo 'PACKAGER_PRIVKEY="/home/packager/.abuild/build.rsa"' > ${GITHUB_WORKSPACE}/apk-build/user.abuild/abuild.conf
          echo "${{ secrets.APKBUILD_RSA }}" > ${GITHUB_WORKSPACE}/apk-build/user.abuild/build.rsa
          chmod 644 ${GITHUB_WORKSPACE}/apk-build/user.abuild/build.rsa
          echo "${{ secrets.APKBUILD_RSA_PUB }}" > ${GITHUB_WORKSPACE}/apk-build/user.abuild/build.rsa.pub
          chmod 644 ${GITHUB_WORKSPACE}/apk-build/user.abuild/build.rsa.pub

      - uses: addnab/docker-run-action@v3
        if: steps.restore-cache-apk.outputs.cache-hit != 'true'
        with:
          image: apk-builder:latest
          options: |
            -v ${{ github.workspace }}/apk-build/user.abuild/:/home/packager/.abuild
            -v ${{ github.workspace }}/apk-build/aports2:/work
            -v ${{ github.workspace }}/apk-build/target:/target
            -e CHECKSUM=0
          run: |
            sudo chown -R packager:packager /home/packager/.abuild
            sudo chmod 600 /home/packager/.abuild/build.rsa
            sudo cp /home/packager/.abuild/build.rsa.pub /etc/apk/keys/
            sudo chown -R packager:packager /target
            /home/packager/bin/build.sh

      - name: Move cache
        if: steps.restore-cache-apk.outputs.cache-hit != 'true'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta2
        uses: docker/metadata-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: ${{ env.IMAGE_NAME_DOCKER }},${{ env.IMAGE_NAME_GHCR }}
          tags: |
            type=ref,event=branch,prefix=,suffix=
            type=ref,event=pr,prefix=,suffix=
            type=semver,pattern={{version}},prefix=,suffix=
            type=semver,pattern={{raw}},prefix=,suffix=
            type=semver,pattern={{major}}.{{minor}},prefix=,suffix=
            type=sha,prefix=,suffix=

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta2.outputs.tags }}
          labels: ${{ steps.meta2.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          build-args: |
            SETUP=0

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta3
        uses: docker/metadata-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: ${{ env.IMAGE_NAME_DOCKER }},${{ env.IMAGE_NAME_GHCR }}
          tags: |
            type=ref,event=branch,prefix=,suffix=-full
            type=ref,event=pr,prefix=,suffix=-full
            type=semver,pattern={{version}},prefix=,suffix=-full
            type=semver,pattern={{raw}},prefix=,suffix=-full
            type=semver,pattern={{major}}.{{minor}},prefix=,suffix=-full
            type=sha,prefix=,suffix=-full

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image -full tag
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta3.outputs.tags }}
          labels: ${{ steps.meta3.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          build-args: |
            SETUP=0
            OPT_PDF=1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta4
        uses: docker/metadata-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: ${{ env.IMAGE_NAME_DOCKER }},${{ env.IMAGE_NAME_GHCR }}
          tags: |
            type=ref,event=branch,prefix=,suffix=-data
            type=ref,event=pr,prefix=,suffix=-data
            type=semver,pattern={{version}},prefix=,suffix=-data
            type=semver,pattern={{raw}},prefix=,suffix=-data
            type=semver,pattern={{major}}.{{minor}},prefix=,suffix=-data
            type=sha,prefix=,suffix=-data

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image with -data tag
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta4.outputs.tags }}
          labels: ${{ steps.meta4.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          build-args: |
            SETUP=1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta5
        uses: docker/metadata-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: ${{ env.IMAGE_NAME_DOCKER }},${{ env.IMAGE_NAME_GHCR }}
          tags: |
            type=ref,event=branch,prefix=,suffix=-data-full
            type=ref,event=pr,prefix=,suffix=-data-full
            type=semver,pattern={{version}},prefix=,suffix=-data-full
            type=semver,pattern={{raw}},prefix=,suffix=-data-full
            type=semver,pattern={{major}}.{{minor}},prefix=,suffix=-data-full
            type=sha,prefix=,suffix=-data-full

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image with -data-full tag
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta5.outputs.tags }}
          labels: ${{ steps.meta5.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          build-args: |
            SETUP=1
            OPT_PDF=1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
